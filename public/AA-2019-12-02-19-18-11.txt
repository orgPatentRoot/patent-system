package com.suixingpay.patent.controller;


import com.suixingpay.patent.service.FileService;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.Date;
import java.util.UUID;
import com.suixingpay.patent.pojo.Notice;

@RestController
@RequestMapping("/file")
@Slf4j
public class NoticeController {
    private static final Logger LOGGER = LoggerFactory.getLogger(NoticeController.class);


    /**
     * 文件上传
     * 要一个文件以及文件的专利id
     */
    @Autowired
    private FileService fileService;
    @GetMapping("/upload")
    public String upload() {
        return "upload";
    }
    @PostMapping("/upload")
    @ResponseBody
    public String upload(@RequestParam("id") int PatentId ,@RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return "文件上传失败，请选择文件";
        }
//        if(file.getSize()>1024*1024*10){
//            return "文件上传失败，文件大小不能超过2M";
//        }


        //获取文件的专利Id
        int filePaentId=PatentId;
        //获取文件的名字
        String fileName = file.getOriginalFilename();


        //获取当前项目根路径
        Notice rootPath = new Notice("");
        String filePath= "";
        try {
            filePath = rootPath.getCanonicalPath();
        } catch (IOException e) {
            e.printStackTrace();
        }


        //把上传的文件拼接并且放在项目的路径下
        filePath = filePath + "/document/";
        Notice dest = new Notice(filePath);


        //开始上传到项目路径下，并且上传到数据库
        try {
            file.transferTo(dest);
            LOGGER.info("上传成功");
            Notice files = new Notice();
            files.setFileCreateTime(new Date());
            files.setFileName(fileName);
            files.setFilePatentId(filePaentId);
            files.setFilePath(filePath + fileName+ UUID.randomUUID());
            files.setFileStatus(1);
            fileService.insert(files);
            return "上传成功";
        } catch (IOException e) {
            LOGGER.error(e.toString(), e);
        }
        return "上传失败！";
    }

    /**
     * 文件进行逻辑删除，修改数据库的状态
     * @param fileId 文件的id
     * @return
     */
    @RequestMapping("/delete")
    public String delete(int fileId){
        fileService.delete(fileId);
        return "删除成功";

    }


    /**
     *
     * @param response
     * @param PatentId
     * @return
     */
    public String  download(HttpServletResponse response,@RequestParam("id") int PatentId){
        //Notice document = FileService.selectDocumentById(id);
        return "";
    }
}
